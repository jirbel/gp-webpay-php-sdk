<?php

namespace AdamStipak\Webpay;

/**
 * Payment Requester class
 */
class PaymentRequest
{

    const EUR = 978;
    const CZK = 203;
    const GBP = 826;
    const HUF = 348;
    const PLN = 985;
    const RUB = 643;
    const USD = 840;

    const PM_CRD = "CRD"; // credit/debit card
    const PM_MCM = "MCM"; // MasterCard Mobile
    const PM_MPS = "MPS"; // MasterPass
    const PM_GPAY = "GPAY"; // GooglePay

    /** @var array */
    private $validPayMethods = [
        self::PM_CRD,
        self::PM_MCM,
        self::PM_MPS,
        self::PM_GPAY,
    ];

    /** @var array */
    private $params = [];

    /**
     * Payment Requester
     *
     * @param int $orderNumber Payments number - must be in each request from trader unique.
     * @param float $amount Price to pay
     * @param int $currency Currency code ISO 4217
     * @param int $depositFlag Request Indicates whether the payment is to be paid automatically. Allowed values: 0 = no immediate payment required 1 = payment is required
     * @param string $url Full Merchant URL. A result will be sent to this address  request. The result is forwarded over customer browser
     * @param int|null $merOrderNumber Order Number. In case it is not specified, it will be used  value $orderNumber It will appear on the bank statement.
     */
    public function __construct(int $orderNumber, float $amount, int $currency, int $depositFlag, string $url, int $merOrderNumber = null)
    {
        $this->setParam('MERCHANTNUMBER', '');
        $this->setParam('OPERATION', 'CREATE_ORDER');
        $this->setParam('ORDERNUMBER', $orderNumber);
        $this->setParam('AMOUNT', $amount * 100);
        $this->setParam('CURRENCY', $currency);
        $this->setParam('DEPOSITFLAG', $depositFlag);

        if ($merOrderNumber) {
            $this->setParam('MERORDERNUM', $merOrderNumber);
        }

        $this->setParam('URL', $url);
    }

    /**
     * Set Digest for current request
     *
     * @param string $digest Verification signature of the string that is generated by concatenating all fields in the order given.
     * @internal
     */
    public function setDigest($digest)
    {
        $this->params['DIGEST'] = $digest;
    }

    /**
     * Gives You all Request params
     * @return array
     */
    public function getParams(): array
    {
        return $this->params;
    }

    /**
     * Set The Merchant Number for request
     *
     * @param $number - Attributed merchant number.
     * @internal
     */
    public function setMerchantNumber($number)
    {
        $this->params['MERCHANTNUMBER'] = $number;
    }

    /**
     * Add Description parameter to request fields
     *
     * @param string $value field value
     */
    public function setDescription($value)
    {
        $this->params['DESCRIPTION'] = $value;
    }

    /**
     * Set preferred payment method
     *
     * @param string $method
     */
    public function setPayMethod(string $method): void
    {
        if ($this->isValidPayMethod($method)) {
            $this->setParam('PAYMETHOD', $method);
        }
    }

    /**
     * Set disabled payment method for current request
     *
     * @param string $method
     */
    public function disablePayMethod(string $method): void
    {
        if ($this->isValidPayMethod($method)) {
            $this->setParam('DISABLEPAYMETHOD', $method);
        }
    }

    /**
     * Set allowed payment methods for current request
     *
     * @param array $methods
     */
    public function allowedPayMethods(array $methods): void
    {
        if (!empty($validMethods = array_filter($methods, [$this, "isValidPayMethod"]))) {
            $this->setParam('PAYMETHODS', implode(",", $validMethods));
        }
    }

    /**
     * Validate pay method identificator
     *
     * @param string $payMethod
     * @return bool
     */
    private function isValidPayMethod(string $payMethod): bool
    {
        return in_array($payMethod, $this->validPayMethods, true);
    }


    /**
     * Set any request param
     *
     * @param string $key
     * @param string|integer|float $value
     *
     * @throws Exception
     */
    public function setParam($key, $value)
    {
        if (array_key_exists($key, Api::PAYMENT_PARAMS)) {
            switch (Api::PAYMENT_PARAMS[$key]['type']) {
                case 'xml':
                    if ($value[0] != '<') {
                        throw new Exception('Payment parameter: ' . $key . ' is not XML');
                    }
                    break;
                case 'string':
                    if (Api::PAYMENT_PARAMS[$key]['size'] !== null && strlen($value) > Api::PAYMENT_PARAMS[$key]['size']) {
                        throw new Exception('Payment parameter: ' . $key . '  not fit in maximum size ' . Api::PAYMENT_PARAMS[$key]['size']);
                    }
                    break;
                case 'numeric':
                    if (is_numeric($value)) {
                        if (Api::PAYMENT_PARAMS[$key]['size'] !== null && strlen(strval($value)) > Api::PAYMENT_PARAMS[$key]['size']) {
                            throw new Exception('Payment parameter: ' . $key . '  not fit in maximum size ' . Api::PAYMENT_PARAMS[$key]['size']);
                        }
                    } else {
                        throw new Exception('Payment parameter: ' . $key . ' is not numeric');
                    }
                    break;
            }

            $this->params[$key] = $value;
        } else {
            throw new Exception('Unknown payment parameter: ' . $key);
        }
    }
}
